use leansig_core::{
    AggregatedVerifier,
    spec::{self},
};
use leansig_shared::{PublicInputs, create_test_data};
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{XMSS_AGGREGATE_ELF, XMSS_AGGREGATE_ID};
use risc0_zkvm::{ExecutorEnv, default_prover};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let test_data = create_test_data(3, spec::SPEC_2, 4, 10000, None, None);

    // Sanity check the signature verification
    let verifier = AggregatedVerifier::new(
        test_data.public_inputs.validator_roots.clone(),
        test_data.public_inputs.spec.clone(),
    );
    assert!(
        verifier.verify(
            &test_data.public_inputs.message,
            &test_data.aggregated_signature
        ),
        "failed to verify aggregated signature"
    );

    // Send test data to the guest
    let env = ExecutorEnv::builder()
        .write(&test_data)
        .unwrap()
        .build()
        .unwrap();

    let prover = default_prover();
    let prove_info = prover.prove(env, XMSS_AGGREGATE_ELF).unwrap();

    let receipt = prove_info.receipt;
    let _committed_public_inputs: PublicInputs = receipt.journal.decode().unwrap();
    receipt.verify(XMSS_AGGREGATE_ID).unwrap();
}
